using EcommercePlatform.Dtos;

using EcommercePlatform.Models;
using EcommercePlatform.Services;
using EcommercePlatform.Utilities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace EcommercePlatform.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class OrdersController : ControllerBase
    {
        private readonly IOrderService orderService;

        public OrdersController(IOrderService orderService)
        {
            this.orderService = orderService;
        }

        [HttpPost("{recentCartId}")]
        public async Task<IActionResult> PlaceOrder([FromRoute] Guid recentCartId)
        {
            var result  = await orderService.PlaceOrdersFromCart(recentCartId);
            return Ok(new {Status=result});
        }

        [HttpPatch("{orderId}")]
        public async Task<IActionResult> UpadateOrderAsync([FromRoute] Guid orderId,[FromBody] UpdateOrderDto dto)
        {
            var res = await orderService.UpdateOrderAsync(orderId, dto);

            return Ok(res);
        }

        [HttpGet("user")]
        [Authorize]
        public async Task<IActionResult> GetOrdersOfUser(
            [FromQuery] DateTime? startDate, 
            [FromQuery] string? sellerId,
            [FromQuery] OrderStatus? orderStatus,
            [FromQuery] DateTime? endDate,
            [FromQuery] PaymentStatus? paymentStatus,
            [FromQuery] int pageNumber = 1,
            [FromQuery] int pageSize = 10)
        {
            string loggedInUserId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "";
            string[] roles = User.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToArray();

            if (startDate is null) startDate = DateTime.MinValue;
            if (endDate is null) endDate = DateTime.MaxValue;

            var parameters = new OrderParameters()
            {
                Startdate = startDate,
                //SellerId = sellerId,
                OrderStatus = orderStatus,
                EndDate = endDate,
                PaymentStatus = paymentStatus,
                PageNumber = pageNumber,
                PageSize = pageSize,
                UserId = loggedInUserId,
            };

            return Ok(await orderService.GetOrdersOfUserAsync(parameters));
        }

        [HttpGet("seller/")]
        [Authorize(Roles ="Seller")]
        public async Task<IActionResult> GetOrdersOfSeller(
            [FromQuery] DateTime? startDate,
            [FromQuery] string? sellerId,
            [FromQuery] OrderStatus? orderStatus,
            [FromQuery] DateTime? endDate,
            [FromQuery] PaymentStatus? paymentStatus,
            [FromQuery] int? pageNumber,
            [FromQuery] int pageSize = 10)
        {
            string loggedInUserId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "";
            string[] roles = User.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToArray();

            var parameters = new OrderParameters()
            {
                Startdate = startDate,
                //SellerId = sellerId,
                OrderStatus = orderStatus,
                EndDate = endDate,
                PaymentStatus = paymentStatus,
                PageNumber = pageNumber ?? 0,
                PageSize = pageSize,
                SellerId = loggedInUserId
            };

            return Ok(await orderService.GetOrdersOfUserAsync(parameters));
        }
    }
}
